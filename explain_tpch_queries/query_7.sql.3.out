                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=129417528.23..129431356.72 rows=10024 width=272) (actual time=714175.092..719168.436 rows=4 loops=1)
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Gather Merge  (cost=129417528.23..129429747.64 rows=97248 width=252) (actual time=713393.166..717358.204 rows=5828738 loops=1)
         Workers Planned: 11
         Workers Launched: 11
         ->  Sort  (cost=129416528.01..129416550.11 rows=8841 width=252) (actual time=713366.763..713506.209 rows=485728 loops=12)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               Sort Method: external merge  Disk: 39264kB
               Worker 0:  Sort Method: external merge  Disk: 37352kB
               Worker 1:  Sort Method: external merge  Disk: 37408kB
               Worker 2:  Sort Method: external merge  Disk: 37936kB
               Worker 3:  Sort Method: external merge  Disk: 37904kB
               Worker 4:  Sort Method: external merge  Disk: 38464kB
               Worker 5:  Sort Method: external merge  Disk: 38424kB
               Worker 6:  Sort Method: external merge  Disk: 37984kB
               Worker 7:  Sort Method: external merge  Disk: 38304kB
               Worker 8:  Sort Method: external merge  Disk: 37848kB
               Worker 9:  Sort Method: external merge  Disk: 38896kB
               Worker 10:  Sort Method: external merge  Disk: 39232kB
               ->  Parallel Hash Join  (cost=4080905.17..129415948.49 rows=8841 width=252) (actual time=7220.572..712945.509 rows=485728 loops=12)
                     Hash Cond: (orders.o_custkey = customer.c_custkey)
                     Join Filter: (((n1.n_name = 'FRANCE'::bpchar) AND (n2.n_name = 'GERMANY'::bpchar)) OR ((n1.n_name = 'GERMANY'::bpchar) AND (n2.n_name = 'FRANCE'::bpchar)))
                     Rows Removed by Join Filter: 485497
                     ->  Nested Loop  (cost=247791.19..125575462.64 rows=1948217 width=124) (actual time=656.915..699116.034 rows=12145073 loops=12)
                           ->  Parallel Hash Join  (cost=247790.60..124572497.65 rows=1948217 width=128) (actual time=656.243..626763.469 rows=12145073 loops=12)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..123699816.20 rows=165598487 width=28) (actual time=1.095..561676.635 rows=151905939 loops=12)
                                       Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       Rows Removed by Filter: 348093204
                                 ->  Parallel Hash  (cost=247496.49..247496.49 rows=23529 width=108) (actual time=654.925..654.933 rows=66646 loops=12)
                                       Buckets: 1048576 (originally 131072)  Batches: 1 (originally 1)  Memory Usage: 65632kB
                                       ->  Hash Join  (cost=12.58..247496.49 rows=23529 width=108) (actual time=0.403..601.533 rows=66646 loops=12)
                                             Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..242103.24 rows=1999924 width=8) (actual time=0.352..542.987 rows=833333 loops=12)
                                             ->  Hash  (cost=12.55..12.55 rows=2 width=108) (actual time=0.020..0.023 rows=2 loops=12)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                   ->  Seq Scan on nation n1  (cost=0.00..12.55 rows=2 width=108) (actual time=0.014..0.017 rows=2 loops=12)
                                                         Filter: ((n_name = 'FRANCE'::bpchar) OR (n_name = 'GERMANY'::bpchar))
                                                         Rows Removed by Filter: 23
                           ->  Memoize  (cost=0.59..2.44 rows=1 width=12) (actual time=0.006..0.006 rows=1 loops=145740881)
                                 Cache Key: lineitem.l_orderkey
                                 Cache Mode: logical
                                 Hits: 1714363  Misses: 10774176  Evictions: 9848551  Overflows: 0  Memory Usage: 104857kB
                                 Worker 0:  Hits: 1627189  Misses: 10227756  Evictions: 9302131  Overflows: 0  Memory Usage: 104857kB
                                 Worker 1:  Hits: 1633903  Misses: 10279584  Evictions: 9353959  Overflows: 0  Memory Usage: 104857kB
                                 Worker 2:  Hits: 1653718  Misses: 10382216  Evictions: 9456591  Overflows: 0  Memory Usage: 104857kB
                                 Worker 3:  Hits: 1650868  Misses: 10364422  Evictions: 9438797  Overflows: 0  Memory Usage: 104857kB
                                 Worker 4:  Hits: 1675591  Misses: 10515122  Evictions: 9589497  Overflows: 0  Memory Usage: 104857kB
                                 Worker 5:  Hits: 1677729  Misses: 10537294  Evictions: 9611669  Overflows: 0  Memory Usage: 104857kB
                                 Worker 6:  Hits: 1655883  Misses: 10402596  Evictions: 9476971  Overflows: 0  Memory Usage: 104857kB
                                 Worker 7:  Hits: 1671573  Misses: 10497013  Evictions: 9571388  Overflows: 0  Memory Usage: 104857kB
                                 Worker 8:  Hits: 1648441  Misses: 10358908  Evictions: 9433283  Overflows: 0  Memory Usage: 104857kB
                                 Worker 9:  Hits: 1695184  Misses: 10653463  Evictions: 9727838  Overflows: 0  Memory Usage: 104857kB
                                 Worker 10:  Hits: 1708605  Misses: 10735284  Evictions: 9809659  Overflows: 0  Memory Usage: 104857kB
                                 ->  Index Scan using orders_pkey on orders  (cost=0.58..2.43 rows=1 width=12) (actual time=0.005..0.005 rows=1 loops=125727834)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
                     ->  Parallel Hash  (cost=3830355.92..3830355.92 rows=220645 width=108) (actual time=6557.661..6557.666 rows=999531 loops=12)
                           Buckets: 16777216 (originally 2097152)  Batches: 1 (originally 1)  Memory Usage: 997056kB
                           ->  Hash Join  (cost=12.58..3830355.92 rows=220645 width=108) (actual time=0.107..5337.668 rows=999531 loops=12)
                                 Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                 ->  Parallel Seq Scan on customer  (cost=0.00..3779884.52 rows=18754852 width=8) (actual time=0.046..4106.012 rows=12500000 loops=12)
                                 ->  Hash  (cost=12.55..12.55 rows=2 width=108) (actual time=0.046..0.047 rows=2 loops=12)
                                       Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                       ->  Seq Scan on nation n2  (cost=0.00..12.55 rows=2 width=108) (actual time=0.039..0.041 rows=2 loops=12)
                                             Filter: ((n_name = 'GERMANY'::bpchar) OR (n_name = 'FRANCE'::bpchar))
                                             Rows Removed by Filter: 23
 Planning Time: 11.524 ms
 Execution Time: 719206.268 ms
(68 rows)

